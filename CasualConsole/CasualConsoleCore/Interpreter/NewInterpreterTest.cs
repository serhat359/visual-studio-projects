using System.Collections.Generic;
using System;

namespace CasualConsoleCore.Interpreter;

public class NewInterpreterTest
{
    public static void Test()
    {
        DoPositiveTests();
    }

    private static void DoPositiveTests()
    {
        var testCases = new List<(string code, object? value)>()
        {
            ("var returnValue = function(x){ return x; };", null),
            ("", null),
            ("    ", null),
            ("2", 2),
            ("-2", -2),
            ("(2)", 2),
            ("-(2)", -2),
            ("-(-2)", 2),
            ("+(-2)", -2),
            ("-(+2)", -2),
            ("((2))", 2),
            ("-(-(2))", 2),
            ("true", true),
            ("false", false),
            ("!true", false),
            ("!false", true),
            ("!(true)", false),
            ("!(false)", true),
            ("\"Hello world\"", "Hello world"),
            ("'Hello world'", "Hello world"),
            ("('Hello world')", "Hello world"),
            ("var aaa;", null),
            ("aaa == null", true),
            ("var aaa = 2", null),
            ("var aa = 2;", null),
            ("var a = 2; a", 2),
            ("var a2 = 2; var b2 = a2 = 5; b2", 5),
            ("var b = 3; b", 3),
            ("b = 5", 5),
            ("b = (7)", 7),
            ("var c = (7) + 2 - 1; c", 8),
            ("var _ = 6; _", 6),
            ("var _a = 7; _a", 7),
            ("var a_ = 8; a_", 8),
            ("var __ = 9; __", 9),
            ("var _a_ = 10; _a_", 10),
            ("var _aa_ = 11; _aa_", 11),
            ("var _2a_ = 12; _2a_", 12),
            ("var _b2 = 13; _b2", 13),
            ("var b345 = 14; b345", 14),
            ("var bbb = true; bbb", true),
            ("var bbbf = false; bbbf", false),
            ("var bool2 = false; !bool2", true),
            ("// this is a comment \n var comment = 5; comment", 5),
            ("/* this is another comment */ var   comment2   =   6; comment2", 6),
            ("returnValue(2)", 2),
            ("returnValue(5, 6)", 5),
            ("returnValue(7 + 2)", 9),
            ("returnValue(7 - 2)", 5),
            ("returnValue((5), 6)", 5),
            ("returnValue(5, (6))", 5),
            ("returnValue(\"hello\")", "hello"),
            ("returnValue('hello')", "hello"),
            ("returnValue(returnValue(2))", 2),
            ("returnValue(returnValue(returnValue(2)))", 2),
            ("2 + 3", 5),
            ("1 + 2", 3),
            ("1 + 2 + 3", 6),
            ("1 - 2 + 3", 2),
            ("1 + 2 - 3", 0),
            ("(1 + 2) + 3", 6),
            ("(1 - 2) - 3", -4),
            ("1 + (2 + 3)", 6),
            ("1 + (2 - 3)", 0),
            ("1 - (2 + 5)", -6),
            ("'' + 2 + 3", "23"),
            ("2 + 3 + ''", "5"),
            ("'' + (2 + 3)", "5"),
            ("(2 + 3) + ''", "5"),
            ("returnValue(2) + returnValue(3)", 5),
            ("returnValue(2) + 3", 5),
            ("returnValue(2) + (3)", 5),
            ("returnValue(2, 3) + (7)", 9),
            ("returnValue(2+1) + (7)", 10),
            ("returnValue(-2) + (7)", 5),
            ("(-2) + (7)", 5),
            ("-2 + (7)", 5),
            ("2 + returnValue(3)", 5),
            ("(2) + returnValue(3)", 5),
            ("'hello' + 'world'", "helloworld"),
            ("'2' + '3'", "23"),
            ("\"2\" + \"3\"", "23"),
            ("\"2\" + '3'", "23"),
            ("'2' + \"3\"", "23"),
            ("2 + '3'", "23"),
            ("'2' + 3", "23"),
            ("2 + 3", 5),
            ("2.0 + 3", 5),
            ("2.0 + 3.0", 5),
            ("2.0 - 3.0", -1),
            ("2.5 + 3.5", 6),
            ("2 * 5", 10),
            ("5 * 2", 10),
            ("5 / 2", 2.5),
            ("5 / 2 / 2", 1.25),
            ("5 / 2 * 2", 5),
            ("5 * 2 / 2", 5),
            ("5 * 2 + 2", 12),
            ("5 + 2 * 2", 9),
            ("(5 + 2) * 2", 14),
            ("5 % 1", 0),
            ("5 % 2", 1),
            ("var mod1 = 5; mod1 %= 2", 1),
            ("2==2", true),
            ("2==3", false),
            ("2 + 2 == 2 + 2", true),
            ("2 * 2 == 2 * 2", true),
            ("1+1*1+1*1+1*1+1*1+1*1+1*1+1*1", 8),
            ("2*2+1 == 2*2+1", true),
            ("1*2+3*4 == 1*2+3*4", true),
            ("1*2+3*4 == 5*6+7*8", false),
            ("1*2+3*4 == 5+6*7+8", false),
            ("5+6*7+8 == 5+6*7+8", true),
            ("1 * 2 + 3 * returnValue(4) == 14", true),
            ("1 * returnValue(2) + returnValue(3) * returnValue(4) == 14", true),
            ("returnValue(1) * returnValue(2) + returnValue(3) * returnValue(4) == 14", true),
            ("returnValue(2) == 2", true),
            ("2 == returnValue(2)", true),
            ("2+3 == 3+2", true),
            ("2 != null", true),
            ("2!=2", false),
            ("2!=3", true),
            ("returnValue(2) != 2", false),
            ("2+2 != 3+2", true),
            ("2 != null", true),
            ("(2 == 2)", true),
            ("!(2 == 2)", false),
            ("null == null", true),
            ("null != null", false),
            ("true == true == true", true),
            ("true == false == false", true),
            ("true == (false == false)", true),
            ("!true == !true", true),
            ("2 < 3", true),
            ("2 <= 3", true),
            ("2 > 3", false),
            ("2 >= 3", false),
            ("2 >= 2", true),
            ("2 <= 2", true),
            ("var f = 1; f += 2", 3),
            ("var g = 1; g -= 2", -1),
            ("var h = 3; h *= 4", 12),
            ("var i = 4.5; i /= 2", 2.25),
            ("var j = 'hello'; j += 2", "hello2"),
            ("var k = 'hello'; k += 2 + 3", "hello5"),
            ("var l = 'hello'; l += ' '; l += 'world'", "hello world"),
            ("true ? 2 : 5", 2),
            ("false ? 2 : 5", 5),
            ("true ? 2 : true ? 3 : 5", 2),
            ("false ? 2 : true ? 3 : 5", 3),
            ("false ? 2 : false ? 3 : 5", 5),
            ("true ? true ? 2 : 3 : 5", 2),
            ("returnValue(true) ? true ? 2 : 3 : 5", 2),
            ("true ? (true ? 2 : 3) : 5", 2),
            ("1 ? 1 ? 1 ? 1 : 1 : 1 : 1", 1),
            ("1 ? 1 : 1 ? 1 : 1 ? 1 : 1", 1),
            ("1 ? 2 : 5", 2),
            ("0 ? 2 : 5", 5),
            ("null ? 2 : 5", 5),
            ("'' ? 2 : 5", 5),
            ("'foo' ? 2 : 5", 2),
            ("var op11 = 2; var op12 = true ? 5 : op11 = 3; op11", 2), // Checking optimization
            ("var op21 = 2; var op22 = false ? 5 : op21 = 3; op21", 3), // Checking optimization
            ("{ var scope1 = null; }", null),
            ("var scope2 = 2; { scope2 = 3; } scope2", 3),
            ("var scopeif1 = 5; if(true){ scopeif1 = 8; } scopeif1", 8),
            ("var scopeif2 = 5; if(false){ scopeif2 = 8; } scopeif2", 5),
            ("var scopeif3 = 5; if(true) scopeif3 = 8; scopeif3", 8),
            ("var scopeif4 = 5; if(true) if(true) scopeif4 = 8; scopeif4", 8),
            ("var scopeif5 = 5; if(true) if(true) { scopeif5 += 1; scopeif5 += 1; } scopeif5", 7),
            ("var scopeifelse1 = 6; if(false){ scopeifelse1 = 7; } else { scopeifelse1 = 8; }  scopeifelse1", 8),
            ("var elseif1 = 1; if(false) elseif1 = 10; else if (false) elseif1 = 11; else if (true) elseif1 = 12; else elseif1 = 13; elseif1", 12),
            ("var elseif2 = 1; if(true) if(true) if(false) elseif2 = 2; else if (false) elseif2 = 3; else if (true) elseif2 = 4; else elseif2 = 5; elseif2", 4),
            ("var elseif3 = 1; if(true) if(false) elseif3 = 5; else elseif3 = 7; elseif3", 7),
            ("var elseif4 = 1; if(true) if(true) if(false) elseif4 = 2; else if (false) elseif4 = 3; else if (true) elseif4 = 4; else elseif4 = 5; elseif4",4),
            ("var elseif5 = 1; if(true) if(false) { if(false) elseif5 = 2; } else if (false) elseif5 = 3; else if (true) elseif5 = 4; else elseif5 = 5; elseif5", 4),
            ("var while1 = 1; while(while1 < 5) while1 += 1; while1", 5),
            ("var customReturnConstantVar = function(){ return -10; }; customReturnConstantVar()", -10),
            ("var func1 = function(){}; func1()", null),
            ("var func2 = true ? function(){ return '1'; } : function(){ return '2'; }; func2()", "1"),
            ("var func3 = function(){ return 8; }; func3()", 8),
            ("var func4 = function(){ if(true) { return 9; } }; func4()", 9),
            ("var func5 = function(){ if(false) { return 9; } }; func5()", null),
            ("var abs = function(x){ if(x < 0) return -x; else return x; };", null),
            ("abs(1)", 1),
            ("abs(0)", 0),
            ("abs(-1)", 1),
            ("abs(-15)", 15),
            ("(abs)(-16)", 16),
            ("var gcd = function(a,b) { a = abs(a); b = abs(b); if (b > a) {var temp = a; a = b; b = temp;} while (true) { if (b == 0) return a; a %= b; if (a == 0) return b; b %= a; } }; gcd(24,60)", 12),
            ("returnValue(true)", true),
            ("(returnValue)(true)", true),
            ("(returnValue)(1) + (returnValue)(2)", 3),
            ("(function(){})()", null),
            ("(function(){ return true; })()", true),
            ("(function(){ return; })()", null),
            ("(function(){ return null; })()", null),
            ("(function(){ return 1; })()", 1),
            ("(function(x){ return x; })(2)", 2),
            ("(function(){ return abs; })()(-3)", 3),
            ("returnValue(abs)(-4)", 4),
            ("(function(){ return function(){ return 1; }; })()()", 1),
            ("function customReturnConstant(){ return -8; } customReturnConstant()", -8),
            ("function returnAddAll(x,y,z){ return x + y + z; } returnAddAll(1,2,3)", 6),
            ("var k1 = 2; function f_k1(){ k1 = 10; } f_k1(); k1", 10),
            ("var o1 = { name: 'Serhat', \"number\": 2, 'otherField': 23, otherMap : { field1: 2001 }, f:function(){} }; o1 != null", true),
            ("o1['name']", "Serhat"),
            ("o1.name", "Serhat"),
            ("o1['number']", 2),
            ("o1.number", 2),
            ("o1['otherField']", 23),
            ("o1.otherField", 23),
            ("o1['undefinedVariable']", null),
            ("o1.undefinedVariable", null),
            ("o1['otherMap']['field1']", 2001),
            ("o1.otherMap.field1", 2001),
            ("o1['otherMap']['newFieldOtherMap'] = 1256", 1256),
            ("o1['otherMap']['newFieldOtherMap']", 1256),
            ("o1.otherMap.newFieldOtherMap = 1257", 1257),
            ("o1.otherMap.newFieldOtherMap", 1257),
            ("o1['newField'] = 987", 987),
            ("o1['newField']", 987),
            ("o1.newField", 987),
            ("({  }) != null", true),
            ("(function(){ return { name: 'serhat' } })()['name']", "serhat"),
            ("({ f: function(){ return -29; } }) != null", true),
            ("({ f: function(){ return -29; } })['f'] != null", true),
            ("({ f: function(){ return -29; } })['f']()", -29),
            ("({ field: 2 })['field']", 2),
            ("var o2 = { fieldName: 'field' }; ({ field: 23 })[o2['fieldName']]", 23),
            ("var while2 = 1; while(while2 < 7) { while2 += 1;  if(while2 == 6) break; } while2", 6),
            ("var while3 = 0; while(true){ break; } while3", 0),
            ("var while4 = 0; while(true){ while(true){ while4 = 2; break; } while4 = 4; break; } while4", 4),
            ("var while5 = 0; var while6 = 1; while(true){ while6 += 1; if(while6 == 10) break; if(while6 % 2 == 0) continue; while5 += 5; } while5", 20),
            ("((x,y) => { return x + y; })(2,3)", 5),
            ("(() => { return -1; })()", -1),
            ("(x => { return -2; })()", -2),
            ("(() => -3)()", -3),
            ("(x => -4)()", -4),
            ("(x => -4 - 2)()", -6),
            ("var o3 = { 'number': 20 }; o3.number += 1", 21),
            ("var o4 = { 'number': 24 }; o4.number += 1; o4.number", 25),
            ("var plusplus1 = 2; ++plusplus1", 3),
            ("var plusplus2 = { number: 21 }; ++plusplus2.number", 22),
            ("var plusplus3 = { number: 25 }; ++plusplus3['number']", 26),
            ("var plusplus4 = { obj: { number: 28 } }; ++plusplus4.obj.number", 29),
            ("var plusplus5 = { obj2: { number: 30 } }; ++plusplus5['obj2'].number", 31),
            ("var plusplus6 = { number: -10 }; ++plusplus6.number; plusplus6.number", -9),
            ("var minusminus1 = { number: 28 }; --minusminus1.number", 27),
            ("var minusminus2 = { number: 29 }; --minusminus2['number']", 28),
            ("1 == 1 && 2 == 2", true),
            ("1 == 1 && 2 == 3", false),
            ("0 == 1 && 2 == 2", false),
            ("0 == 1 && 2 == 3", false),
            ("var o5 = { number: 29 }; o5 != null && o5.number == 29", true),
            ("var o6 = null; o6 != null && o6.number == 29", false), // Optimization check
            ("var o7 = { number: 32 }; o7 && o7.number == 32", true), // Truthy check
            ("var o8 = null; o8 != null && o8.number == 33", false), // Optimization check with truthy
            ("1 == 1 || 2 == 2", true),
            ("1 == 1 || 2 == 3", true),
            ("0 == 1 || 2 == 2", true),
            ("0 == 1 || 2 == 3", false),
            ("var x1 = -9; var modifier = function(){ x1 = -8; return false; }", null), // Preperation for next test
            ("var x2 = false && modifier(); x2 == false && x1 == -9", true), // Optimization check
            ("var x3 = true && modifier(); x3 == false && x1 == -8", true), // Optimization check
            ("var plusplus7 = 8; var plusplus8 = plusplus7++; plusplus8 == 8 && plusplus7 == 9", true),
            ("var plusplus9 = 10; 2 + plusplus9++", 12),
            ("var o9 = { number: 5 }; var n1 = o9['number']++; n1 == 5 && o9['number'] == 6", true),
            ("var o10 = { number: 6 }; var n2 = o10.number++; n2 == 6 && o10.number == 7", true),
            ("var plusplus10 = 9; 2 + plusplus10--", 11),
            ("var o11 = { number: 2 }; var n3 = o11['number']--; n3 == 2 && o11['number'] == 1", true),
            ("var o12 = { number: 3 }; var n4 = o12.number--; n4 == 3 && o12.number == 2", true),
            ("var arr1 = [1,2,3]", null),
            ("arr1.length", 3),
            ("arr1[0]", 1),
            ("arr1[1]", 2),
            ("arr1[2]", 3),
            ("arr1[1] = 5", 5),
            ("arr1[1]", 5),
            ("arr1.length = 4", 4),
            ("arr1.length", 4),
            ("arr1[3]", null),
            ("arr1[4]", null),
            ("arr1.name", null),
            ("arr1.name = 'hello'", "hello"),
            ("arr1.name", "hello"),
            ("var o13 = { 'name': 'some name', nameGetter: function(){ return this.name; } }; o13.nameGetter()", "some name"),
            ("var indexer = function(i){ return this[i]; }; var arr2 = [4,5,6]; arr2.get = indexer; arr2.get(0)", 4),
            ("var arr3 = [];", null),
            ("arr3.length", 0),
            ("arr3.push(5)", 1),
            ("arr3.length", 1),
            ("arr3[0]", 5),
            ("arr3.length = 2", 2),
            ("arr3.push(12)", 3),
            ("arr3[0]", 5),
            ("arr3[1]", null),
            ("arr3[2]", 12),
            ("arr3.length = 0", 0),
            ("arr3.push(7)", 1),
            ("arr3[0]", 7),
            ("arr3 = [7,6,7]; arr3.length", 3),
            ("arr3.pop()", 7),
            ("arr3.length", 2),
            ("arr3.pop()", 6),
            ("arr3.length", 1),
            ("arr3.pop()", 7),
            ("arr3.length", 0),
            ("for(;;) break;", null),
            ("var for1 = 1; for(var i=0; i < 10; i++) for1 += 2; for1", 21),
            ("var total = 0; var a = [1,2,3,4]; for(var i = 0; i < a.length; i++) total += a[i]; total", 10),
            ("for(var i=0, j=10; ; i+=2, j++){ if(i==j) break; } i == 20 && j == 20", true),
            ("var total = 0; var o = { x1: 2, x2: 5, x4: 7 }; for(var x in o) total += o[x]; total", 14),
            ("var total = 0; for(var x of [1,2,3,4,5]) total += x; total", 15),
            ("var scopevar1 = 2; { var scopevar1 = 3; } scopevar1", 3),
            ("let scopelet1 = 2; { let scopelet1 = 3; } scopelet1", 2),
            ("const scopeconst1 = 2; { const scopeconst1 = 3; } scopeconst1", 2),
            ("for(const i = 0; i < 0; i++){}", null),
            ("for(const i of [1,2,3,4]){}", null),
            ("var scopevar2 = 5; (function(){ var scopevar2 = 8; })(); scopevar2", 5),
            ("for(var i = 0, j = 0; i < 5; i++){} i", 5),
            ("let li = 6; for(let li = 0; li < 5; li++){} li", 6),
            ("for(let li = 0, lj = 0; li < 5; li++, lj++){}", null), // Testing let with multi initialization
            ("var arr = []; for(var i = 0; i < 2; i++) arr.push(() => i); arr[0]()", 2),
            ("let i2 = 10; var arr = []; for(let i2 = 0; i2 < 2; i2++) arr.push(() => { return i2; }); arr[0]()", 0),
            ("var arr = []; for(let i2 = 0; i2 < 2; i2++) { let iset = () => { return i2 = 15; }; let iget = () => i2; arr.push({ iset: iset, iget: iget }); };", null),
            ("arr[1].iget()", 1),
            ("arr[1].iset()", 15),
            ("arr[1].iget()", 15),
            ("let i3 = 0; for(i3 of [1,2,3]){} i3", 3),
            ("let i4 = 6; for(let i4 of [1,2,3]){} i4", 6),
            ("`hello`", "hello"),
            ("`$`", "$"),
            ("`\\$`", "$"),
            ("`\\${number}`", "${number}"),
            ("`${2}`", "2"),
            ("`$${2}`", "$2"),
            ("`\\$${2}`", "$2"),
            ("`${2+3}`", "5"),
            ("`${(2+3)}`", "5"),
            ("`\n`", "\n"), // Allow new lines for backtick strings
            ("`hello ${'world'}`", "hello world"),
            ("`hello ${`world`}`", "hello world"),
            ("`hello ${`w${`orld`}`}`", "hello world"),
            ("`${`}` + `}`}`", "}}"),
            ("var number = 1; `${number}`", "1"),
            ("var number = 1; `foo ${number} baz`", "foo 1 baz"),
            ("var text = 'world'; `hello ${text}`", "hello world"),
            ("'' + null", "null"),
            ("null + ''", "null"),
            ("'' + true", "true"),
            ("'' + false", "false"),
            ("'' + 2", "2"),
            ("'' + 2.5", "2.5"),
            ("!2", false),
            ("!!2", true),
            ("!0", true),
            ("!!0", false),
            ("!''", true),
            ("!!''", false),
            ("!'a'", false),
            ("!!'a'", true),
            ("null ?? 2", 2),
            ("null ?? `hello`", "hello"),
            ("null || `hello`", "hello"),
            ("null || 2", 2),
            ("0 ?? 2", 0),
            ("0 || 2", 2),
            ("'' ?? 'hello'", ""),
            ("'' || 'hello'", "hello"),
            ("2 && 7", 7),
            ("2 && 0", 0),
            ("var name = 'name1'; ({ name }).name", "name1"),
            ("print()", null),
            ("[...[1,2,3]].length", 3),
            ("var arr = [2, ...[1,2,3]]; arr[0] == 2 && arr[1] == 1 && arr[2] == 2 && arr[3] == 3", true),
            ("var arr = [1,2,3]; var arr2 = [...arr]; arr.push(6); arr2.length", 3),
            ("(function(){ var total = 0; for(var x of arguments) total += x; return total; })(1,2,3,4)", 10),
            ("(function(){ var total = 0; for(var x of arguments) total += x; return total; })(2, ...[1,2,3,4,5], 1)", 18),
            ("(function(x,y,...rest){ var total = 0; for(var x of rest) total+=x; return total })(1,2,3,4,5)", 12),
            ("var o = { age: 26 }; -o.age", -26),
            ("var o = { age: 27 }; -o[`age`]", -27),
            ("-(x => x)(2)", -2),
            ("(function(){ return null; })() == null", true),
            ("(async function(){ return null; })() == null", false),
            ("(() => null)() == null", true),
            ("(async () => null)() == null", false),
            ("(async x => null)() == null", false),
            ("(async (x) => null)() == null", false),
            ("(async (x,y) => null)() == null", false),
            ("(() => null) == null", false),
            ("(x => null) == null", false),
            ("((x,y) => null) == null", false),
            ("(async () => null) == null", false),
            ("(async x => null) == null", false),
            ("(async (x,y) => null) == null", false),
            ("var asyncFunc1 = async x => x; var prom1 = asyncFunc1(2); await prom1", 2),
            ("await (async x => x)(2)", 2),
            ("await 2", 2),
            ("await await 2", 2),
            ("var { name1, age1 } = { name1:'serhat', age1: 25 }; name1 == 'serhat' && age1 == 25", true),
            ("var [ n1, n2, n3, n4, n5 ] = [ 5,6,7 ]; n1 == 5 && n2 == 6 && n3 == 7 && n4 == null && n5 == null", true),
            ("(()=>-2)()", -2),
            ("var ff = ()=> { var elseif1 = 1; if(false) elseif1 = 10; else if (false) elseif1 = 11; else if (true) elseif1 = 12; else elseif1 = 13; return elseif1; }; ff()", 12),
            ("var o = null;", null),
            ("o?.name", null),
            ("o?.['name']", null),
            ("o?.name?.name", null),
            ("o?.['name']?.['name']", null),
            ("o?.name.name", null),
            ("o?.['name']['name']", null),
            ("o?.name.name()", null),
            ("o?.['name']['name']()", null),
            ("o?.name.name().name", null),
            ("o?.['name']['name']()['name']", null),
            ("o?.[2]", null),
            ("o = [1,2,3]; o?.[2]", 3),
            ("o = { name: 'Serhat' }; o.name", "Serhat"),
            ("o?.name", "Serhat"),
            ("o = null;", null),
            ("o?.()", null),
            ("o?.name()", null),
            ("o?.name?.()", null),
            ("o = {}; o.name?.()", null),
            ("var potentiallyNullObj = null; var x = 0; var prop = potentiallyNullObj?.[x++]; x", 0),
            ("var f = x => `asd${x}asd`; var arr = [f(1),f(2),f(3)]; arr[0] == 'asd1asd' && arr[1] == 'asd2asd' && arr[2] == 'asd3asd'", true),
            ("Array.prototype.popTwice = function(){ this.pop(); this.pop(); }; var arr = [1,2,3]; arr.popTwice(); arr.length", 1),
            ("Array.prototype.pushTwice = function(x){ this.push(x); this.push(x); }; var arr = [1,2,3]; arr.pushTwice(9); arr.length == 5 && arr[3] == 9 && arr[4] == 9", true),
            ("var f = function(x, y, z){ return this.name + (x + y); }; var o = { name: 'Serhat' }; f.call(o, 1, 2)", "Serhat3"),
            ("var f = function(x, y, z){ return this.name + (x + y); }; var o = { name: 'Serhat' }; f.apply(o, [1, 2])", "Serhat3"),
            ("'hello'.charAt(0)", "h"),
            ("'hello'.charAt(2)", "l"),
            ("var o = { name: 'Serhat', age: 30 }; var name; var age; ({ name, age } = o); name == 'Serhat' && age == 30", true),
            ("var xx1; var xx2; ([xx1, xx2] = [5,6]); xx1 == 5 && xx2 == 6", true),
            ("var o1 = { i1: 1 }; var o2 = { i2: 2, i3: 3 }; var o3 = { ...o1, ...o2 }; o3.i1 == 1 && o3.i2 == 2 && o3.i3 == 3", true),
            ("({ key: 1, key: 2 }).key", 2),
            ("var o = { name: \"Serhat\", age: 30 }; var { age: agenew } = o; agenew", 30),
            ("function f(x,x,x){ return x; } ", null),
            ("f(1,2,3)", 3),
            ("var o = { name: 'Serhat', getName(){ return this.name; } }; o.getName()", "Serhat"),
            ("var o = { async n(){ return 2; } }; await o.n()", 2),
            ("function* f(){};", null),
            ("var emptyNext = (function*(){})().next(); emptyNext.value == null && emptyNext.done == true", true),
            ("var numbersGen = (function*(){ yield 1; yield 2; })(); numbersGen != true", true),
            ("var { value, done } = numbersGen.next(); value == 1 && done == false", true),
            ("var { value, done } = numbersGen.next(); value == 2 && done == false", true),
            ("var { value, done } = numbersGen.next(); value == null && done == true", true),
            ("var gen = function*(){ for(var i = 0; i < arguments.length; i++) {  yield arguments[i]; yield arguments[i]; } }; var genFirst = gen(1,2,3).next(); genFirst.value == 1", true),
            ("function* f(){ yield 1; yield 2; } var arr = []; for(var x of f()) arr.push(x); arr.length", 2),
            ("function* f(){ yield 1; yield 2; } [...f()].length", 2),
            ("function* f(){ yield 1; yield 2; } function c(){ return arguments.length; } c(...f()) ", 2),
            ("function* f(){ yield 1; yield 2; } function* c(){ yield* f(); yield* [1,2,3]; } [...c()].length", 5),
            ("var f = async function*(){ yield 1; yield 2 }; var gen = f(); var val = gen.next(); (await val).value == 1", true),
            ("var arr = []; for await (let x of f()) arr.push(x); arr.length", 2),
            ("var arr = []; for(let i = 0; i < 10; i++){ i++; arr.push(i); } arr.length", 5),
            ("async function* asd1(){ yield 1; yield 2; yield 3; }; async function* asd2(){ yield 1; for await (let x of asd1()) yield x; }; var arr = []; for await (let x of asd2()) arr.push(x); arr.length", 4),
            ("\"\\u0041\"", "A"),
            ("\"\\u0041\\u0041\\u0041\"", "AAA"),
            ("'\\u0041\\u0041\\u0041'", "AAA"),
            ("`\\u0041\\u0041\\u0041`", "AAA"),
            ("\"\\u003C/script\\u003E\"", "</script>"),
            ("\"\\uD83D\\uDC4C\"", "👌"),
            ("var o = { get val(){ return 2; } }; o.val", 2),
            ("var o = { name:'Serhat', get gname(){ return this.name; } }; o.gname", "Serhat"),
            ("var x = 2; var o = { set val(value){ x = value; } }; o.val = 10; x", 10),
            ("var x = 2; var o = { set val(value){ x = value; }, get val(){ return x; } }; x = 25; o.val", 25),
            ("(function(x,){return x})(12,)", 12),
            ("var { name, } = { name: 'Serhat', }; name", "Serhat"),
            ("var [x,] = [12,]; x", 12),
            ("(function(a,b,...rest){ return rest.length })()", 0),
            ("class Rectangle { constructor(height, width) { this.height = height; this.width = width; } get area() { return this.calcArea(); } calcArea() { return this.height * this.width; } } new Rectangle(10,20).height", 10),
            ("new Rectangle(10,20).area", 200),
            ("Rectangle != null", true),
            ("Rectangle.prototype.calcArea != null", true),
            ("Rectangle.prototype.isSquare = function(){ return this.width == this.height; }; new Rectangle(20,20).isSquare()", true),
            ("var proxy = new Proxy([], {}); proxy.push(12); proxy.length", 1),
            ("var proxy = new Proxy({}, {}); proxy.name = 'Serhat'; proxy.name", "Serhat"),
            ("var proxy = new Proxy({ name(){ return 'Serhat' } }, {}); proxy.name()", "Serhat"),
            ("var proxy = new Proxy({}, { get(obj, prop){ return prop } }); proxy.customProp", "customProp"),
            ("var proxy = new Proxy({ name: 'Serhat' }, { get(obj, prop){ return obj[prop] ?? '23' } }); proxy.name", "Serhat"),
            ("proxy.customProp", "23"),
            ("var proxy = new Proxy({ name: 'Serhat', age: 23 }, { set(obj, prop, value){ if(prop == 'age' && value < 20) obj[prop] = 20; else obj[prop] = value } }); proxy.name = 'new name'", "new name"),
            ("proxy.age = 30", 30),
            ("proxy.age", 30),
            ("proxy.age = 15", 15),
            ("proxy.age", 20),
            ("'A'.charCodeAt(0)", 65),
            ("'Aa'.charCodeAt(1)", 97),
            ("Math.floor(3.2)", 3),
            ("Math.floor(-3.2)", -4),
            ("var ran = Math.random(); ran >=0 && ran < 1", true),
            ("'text'.length", 4),
            ("'hello'.length", 5),
            ("var total = 0; for (let c of 'hello') total++; total", 5),
            ("var k = null; k ??= 2; k", 2),
            ("var k = 2; var n = null; k ??= n=2; n", null), // Checking optimization
            ("var k = 0; k ||= 2; k", 2),
            ("var k = 2; var n = null; k ||= n=2; n", null), // Checking optimization
            ("var k = 0; k &&= 2; k", 0),
            ("var k = ''; k &&= 2; k", ""),
            ("var k = 'hello'; k &&= 2; k", 2),
            ("var k = ''; var n = null; k &&= n=2; n", null), // Checking optimization
            ("var o = { name:'thisName', getName(){ return (() => this.name)(); } }; o.getName()", "thisName"),
            ("var [x, ...y] = [1,2,3,4]; y.length", 3),
        };

        var interpreter = new NewInterpreter();
        foreach (var (code, value) in testCases)
        {
            Console.WriteLine($"Running test: {code}");
            var result = interpreter.RunCode(code);
            if (!InterpreterExtensions.Equals(result, value))
            {
                throw new Exception();
            }
            Console.WriteLine("Passed");
        }
    }
}
